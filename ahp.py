# -*- coding: utf-8 -*-
"""AHP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N9j-LC9lcHxKaVjFV38tD8G1Fgk5oo0o
"""

# ------- BIBLIOTECAS  -------
import matplotlib.pyplot as plt
import random
import math
import numpy as np

# ------- DEFINIÇÃO DAS FUNÇÕES  -------
def imprime_crit():
  print("\n"*10) 
  print('*************** AHP *******************')
  print('*                                     *')
  print('* Digite o nome do critério           *') 
  print('*                                     *') 
  print('* Digite (n), caso não deseje inserir *')   
  print('* mais critérios                      *')
  print('*                                     *')  
  print('***************************************')


def imprime_alt():
  print("\n"*10) 
  print('*************** AHP *******************')
  print('*                                     *')
  print('* Digite uma alternativa              *') 
  print('*                                     *') 
  print('* Digite (n), caso não deseje inserir *')   
  print('* mais alternativas                   *')
  print('*                                     *')  
  print('***************************************')



def round_down(n, decimals=0):
  multiplier = 10 ** decimals
  return math.floor(n * multiplier) / multiplier

def round_up(n, decimals=0):
  multiplier = 10 ** decimals
  return math.ceil(n * multiplier) / multiplier

# ------- DEFINIÇÃO DAS CLASSES  -------
class AHP(object):

  def __init__(self, matriz_gen, array_crit, matriz_norm, array_alt, num, num_alt, array_mat, matriz_prioridade, autovalor, CI, CR):
    self.matriz_gen = matriz_gen
    self.array_crit = array_crit
    self.matriz_norm = matriz_norm
    self.array_alt = array_alt
    self.num = num
    self.num_alt = num_alt
    self.array_mat = array_mat
    self.matriz_prioridade = matriz_prioridade
    self.autovalor = autovalor
    self.CI = CI
    self.CR = CR


  def define_criterios(self):
    "Determina os critérios e seu número"
    imprime_crit()
    criterio = input()
    while(criterio != "n"):
      imprime_crit()
      self.array_crit.append(criterio)
      self.num = self.num + 1
      criterio = input()
    self.array_crit = np.array(self.array_crit)
    self.matriz_gen = np.ones([self.num,self.num], float)
    self.matriz_norm = np.ones([self.num,self.num], float)


  def compara_criterios(self):
    "Usuário determina comparações entre critérios"
    print("\n"*10) 
    for i in range(0,len(self.matriz_gen)):
      for j in range(0,len(self.matriz_gen[0])):
          if i<j:
            aij = input('O quão importante é ' + self.array_crit[i] + ' em relação a ' + self.array_crit[j] + '?:')
            self.matriz_gen[i,j] = float(aij) #elementos triangulares superiores  
            self.matriz_gen[j,i] = round_down(1/float(aij), 4) #elementos triangulares inferiores
  
  def insere_alt(self):
    "Insere as alternativas e seu número"
    imprime_alt()
    alternativa = input()
    while(alternativa != "n"):
      imprime_alt()
      self.array_alt.append(alternativa)
      self.num_alt = self.num_alt + 1
      alternativa = input()

  def faz_matriz_crit(self):
    for i in range (0, self.num):
      self.array_mat.append(np.ones((self.num_alt,2), float))
    self.array_mat = np.array(self.array_mat) 
      # array de matrizes com dentro de cada matriz as colunas Critério, prioridade e ranque    

  def avalia_mat_alt(self):
    "Determina valores às alternativas, dados os critérios"
    print("\n"*9) 
    for i in range (0, self.num):
      print("\n")
      for j in range (0, self.num_alt):
        self.array_mat[i][j][0] = float(input("Digite o valor atribuido para o critério " + self.array_crit[i] + " (alternativa: " + self.array_alt[j] + ") " ))

  def imprime_matriz_gen(self):
    print(self.matriz_gen)
  
  def imprime_matriz_norm(self):
    print(self.matriz_norm)   

  def imprime_numero_crit(self):
    print(self.num)

  def imprime_numero_alt(self):
    print(self.num_alt)  
  
  def imprime_criterios(self):
    print(self.array_crit)

  def imprime_alternativas(self):
    print(self.array_alt)  

  def imprime_matriz_alt_crit(self):
    print(self.array_mat)  

  def imprime_matriz_prioridade(self):
    print(self.matriz_prioridade)

  def imprime_CI(self):
    print(self.CI)  

  def imprime_CR(self):
    print(self.CR)   

  def normaliza_matriz(self, matriz):
    "The normalized matrix is realize trough a division of each matrix element by the sum of its respective column"
    array_soma_coluna = np.sum(matriz, axis=0)
    matriz_norm = np.ones([len(matriz),len(matriz[0])], float)
    for i in range(0, len(matriz)):
      for j in range(0, len(matriz[0])):
        matriz_norm[i][j] = round((matriz[i][j])/(array_soma_coluna[j]), 4)
    return matriz_norm

  def calcula_prioridade_media(self):
    for x in range (0, self.num):
      array_soma_coluna = np.sum(self.array_mat[x], axis=0)
      for i in range(0, self.num_alt):
        self.array_mat[x][i][1] = round((self.array_mat[x][i][0])/(array_soma_coluna[0]), 4) 
  
  def calcula_prioridade_linha(self):
    self.matriz_prioridade = np.ones([self.num,1], float)
    array_soma_linha = np.sum(self.matriz_norm, axis=1)
    for i in range(0, self.num):
      self.matriz_prioridade[i][0] = round((array_soma_linha[i])/self.num, 4) 
  
  def soma_valores_prioridade(self):
    return self.matriz_gen.dot(self.matriz_prioridade)

  def calcula_autovalor(self, W):
    self.autovalor = np.sum((W/self.matriz_prioridade), axis=0)/self.num

  def calcula_CI(self):
    self.CI = (self.autovalor-self.num)/(self.num-1)
  
  def define_RI(self):
    if (self.num == 3):
      return 0.58
    elif(self.num == 4): 
      return 0.90
    elif(self.num == 5): 
      return 1.12
    elif(self.num == 6): 
      return 1.24  
    elif(self.num == 7): 
      return 1.32
    elif(self.num == 8): 
      return 1.41
    elif(self.num == 9): 
      return 1.45
    elif(self.num == 10): 
      return 1.49
    elif(self.num == 11): 
      return 1.51
    elif(self.num == 12): 
      return 1.54
    elif(self.num == 13): 
      return 1.56
    elif(self.num == 14): 
      return 1.57
    else: 
      return 1.58

  def calcula_CR(self, RI):
    self.CR = (self.CI/RI)*100

  def sintese_AHP(self):
    array_index_max = list([])
    array_index_min = list([])
    array_prioridade_max = list([])
    array_prioridade_min = list([])
    num_max = 0
    num_min = 0

    #self.array_crit.append(criterio)
    print("\n"*10) 
    for x in range (0, self.num):
      criterio = ""
      while (criterio!="max" and criterio!="min"):
        criterio = input("O Critério " + self.array_crit[x] + " é maximizador (max) ou minimizador (min)? ")
        if (criterio!="max" and criterio!="min"):
          print("\n Erro, digite min ou max para determinar característica do critério. \n")
      if (criterio == "max"):
        array_index_max.append(x)
        array_prioridade_max.append(self.matriz_prioridade[x])
        num_max = num_max + 1
      else:
        array_index_min.append(x)
        array_prioridade_min.append(self.matriz_prioridade[x]) 
        num_min = num_min + 1

    array_index_max = np.array(array_index_max)
    array_index_min = np.array(array_index_min)

    array_prioridade_max = np.array(array_prioridade_max)
    array_prioridade_min = np.array(array_prioridade_min)

    matriz_pos = np.ones([self.num_alt, num_max], float)
    matriz_neg = np.ones([self.num_alt, num_min], float)

    print(array_index_max)
    print(len(array_index_max))
    print(array_index_min)
    print(len(array_index_min))

    x = 0
    for i in range(0, self.num_alt):
      x = 0
      for j in range (0, num_max):
        y = array_index_max[x]
        matriz_pos[i][j] = self.array_mat[y][i][1] 
        x = x + 1  

    x = 0
    for i in range(0, self.num_alt):
      x = 0
      for j in range (0, num_min):
        y = array_index_min[x]
        matriz_neg[i][j] = self.array_mat[y][i][1]  
        x = x + 1    

    print(matriz_pos)

    print(matriz_neg)
    print(array_prioridade_max)
    print(array_prioridade_min)

    pos = matriz_pos.dot(array_prioridade_max)
    neg = matriz_neg.dot(array_prioridade_min)

    resultado = pos/neg 

    resultado = np.round_(resultado, decimals = 4)

    print(resultado)

    return resultado
    
  def ordem_de_preferencia(self, resultado):
    ordem = list([])
    resultado_ordenado = -np.sort(-resultado, axis=0) 
    for x in range(0, self.num_alt):
      i = np.where(resultado == resultado_ordenado[x])
      ordem.append([x+1, self.array_alt[i[0][0]], resultado_ordenado[x][0]])

    ordem = np.array(ordem)

    return ordem

# ------- PROGRAMA  -------
ahp = AHP(np.ones(1, int), list([]), np.ones(1, int), list([]), 0, 0, list([]), np.ones(1, int),0,0,100)

ahp.define_criterios()

while (ahp.num < 3 or ahp.num > 15):
  print("Erro, número de critérios inválido")
  ahp = AHP(np.ones(1, int), list([]), np.ones(1, int), list([]), 0, 0, list([]), np.ones(1, int),0,0,100)
  ahp.define_criterios()

ahp.insere_alt()

while(ahp.CR >= 10):
  ahp.compara_criterios()

  ahp.faz_matriz_crit()

  ahp.avalia_mat_alt()

  ahp.matriz_norm = ahp.normaliza_matriz(ahp.matriz_gen)

  ahp.imprime_matriz_norm()

  ahp.calcula_prioridade_media()

  ahp.imprime_matriz_alt_crit()

  ahp.calcula_prioridade_linha()

  ahp.imprime_matriz_prioridade()

  print(ahp.soma_valores_prioridade())

  ahp.calcula_autovalor(ahp.soma_valores_prioridade())

  ahp.calcula_CI()

  ahp.calcula_CR(ahp.define_RI())

  ahp.imprime_CI()

  ahp.imprime_CR()

ordem = ahp.ordem_de_preferencia(ahp.sintese_AHP())

print(ordem)